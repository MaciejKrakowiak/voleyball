<!DOCTYPE html>
<html lang="pl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Match details</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="container mt-5">
    <h1 class="mb-4 text-center">Match details</h1>

    <!-- Container for team vievs-->
    <div class="teams-container d-flex justify-content-center mb-4">
      <div id="teamA-wrapper" class="team-wrapper p-3 border rounded m-3">
        <div id="teamA-total" class="fs-4 mb-2"><%= match.result.split(':')[0] %></div>
        <div class="teamAname fs-5 mb-3"><%= match.teamA_name %></div>
        <form action="/details/add-point" method="POST" class="d-inline">
          <input type="hidden" name="id" value="<%= match.id %>">
          <input type="hidden" name="team_name" value="<%= match.teamA_name %>">
          <button type="submit" id="scoreA-btn" class="btn btn-primary">
            <span id="scoreA"><%= match.resultDetailed.resD[match.resultDetailed.resD.length - 1].split(':')[0] %></span>
          </button>
        </form>
        <form action="/details/minus-point" method="POST" class="d-inline" onsubmit="return validateScore('scoreA', 'minusA-btn')">
          <input type="hidden" name="id" value="<%= match.id %>">
          <input type="hidden" name="team_name" value="<%= match.teamA_name %>">
          <button type="submit" id="minusA-btn" class="btn btn-danger">-</button>
        </form>
      </div>

      <div id="teamB-wrapper" class="team-wrapper p-3 border rounded m-3">
        <div id="teamB-total" class="fs-4 mb-2"><%= match.result.split(':')[1] %></div>
        <div class="teamBname fs-5 mb-3"><%= match.teamB_name %></div>
        <form action="/details/add-point" method="POST" class="d-inline">
          <input type="hidden" name="id" value="<%= match.id %>">
          <input type="hidden" name="team_name" value="<%= match.teamB_name %>">
          <button type="submit" id="scoreB-btn" class="btn btn-primary">
            <span id="scoreB"><%= match.resultDetailed.resD[match.resultDetailed.resD.length - 1].split(':')[1] %></span>
          </button>
        </form>
        <form action="/details/minus-point" method="POST" class="d-inline" onsubmit="return validateScore('scoreB', 'minusB-btn')">
          <input type="hidden" name="id" value="<%= match.id %>">
          <input type="hidden" name="team_name" value="<%= match.teamB_name %>">
          <button type="submit" id="minusB-btn" class="btn btn-danger">-</button>
        </form>
      </div>
    </div>

    <!-- additional data -->
    <p><strong>Match date:</strong> <span id="match-date"><%= new Date(match.date).toISOString() %></span></p>
    <p><strong>Status:</strong> <span id="match-status"><%= match.status %></span></p>

    <p id="time-section" style="display: none;">
      <strong>Current time:</strong> <span id="current-time"></span><br>
      <strong>Match time:</strong> <span id="game-time"></span><br>
      <strong>Set time:</strong> <span id="set-time"></span>
    </p>


    <!-- Buttons to chandle set change end match and go back to menu -->
    <div class="d-flex justify-content-center mb-4">
      <form action="/details/end-set" method="POST" class="d-inline m-1">
        <input type="hidden" name="id" value="<%= match.id %>">
        <button type="submit" id="end-set-Btn" class="btn btn-warning" style="display: none;">End set</button>
      </form>
  
      <form action="/details/end-match" method="POST" class="d-inline m-1">
        <input type="hidden" name="id" value="<%= match.id %>">
        <button type="submit" id="end-match-Btn" class="btn btn-danger" style="display: none;">End match</button>
      </form>
  
      <form action="/details/swap" method="POST" class="m-1">
        <input type="hidden" name="id" value="<%= match.id %>">
        <button type="submit" id="swap-Btn" class="btn btn-info">Swap</button>
      </form>

      <a href="/matches" class="btn btn-secondary m-1">Return to matches</a>
    </div>

    
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io.connect();
    const matchId = "<%= match.id %>";

    socket.emit('join-match-room', matchId);

    socket.on('disconnect', () => {
      console.log('Disconnected from room');
    });

    socket.on('end-match', () => {
      window.location.href = '/matches';
    });

    socket.on('change-position', (flag) => {
      const teamAWrapper = document.getElementById('teamA-wrapper');
      const teamBWrapper = document.getElementById('teamB-wrapper');
      const teamsContainer = document.querySelector('.teams-container');

      if (flag) {
        // Swap the positions of teamA and teamB
        teamsContainer.insertBefore(teamBWrapper, teamAWrapper);
      } else {
        // Restore default positions
        teamsContainer.insertBefore(teamAWrapper, teamBWrapper);
      }
    });

    //Reading time provided by interval
    socket.on('time-update', ({ currentTime, elapsedGameTime }) => {
      const formattedTime = new Date(currentTime).toLocaleTimeString();
      document.getElementById('current-time').textContent = formattedTime;

      const minutes = Math.floor(elapsedGameTime / 60000);
      const seconds = Math.floor((elapsedGameTime % 60000) / 1000);
      document.getElementById('time-section').style.display = 'block';
      document.getElementById('game-time').textContent = `${minutes}m ${seconds}s`;
    });

     //Reading time provided by interval
    socket.on('set-time-update', ({ elapsedSetTime }) => {
      const minutes = Math.floor(elapsedSetTime / 60000);
      const seconds = Math.floor((elapsedSetTime % 60000) / 1000);
      document.getElementById('set-time').textContent = `${minutes}m ${seconds}s`;
    });

    socket.on('details-updated', (data) => {
      const updatedMatch = data.match;

      // Update the individual set scores
      const [updatedScoreA, updatedScoreB] = updatedMatch.resultDetailed.resD[updatedMatch.resultDetailed.resD.length - 1].split(':');

      // Update the total scores for each team
      const updatedTotalA = updatedMatch.result.split(':')[0];
      const updatedTotalB = updatedMatch.result.split(':')[1];

      // Update the team score elements
      document.getElementById('scoreA').textContent = updatedScoreA;
      document.getElementById('scoreB').textContent = updatedScoreB;

      // Update the total result display
      document.getElementById('teamA-total').textContent = `${updatedTotalA}`;
      document.getElementById('teamB-total').textContent = `${updatedTotalB}`;

      // Update the date and match status
      const updatedDate = new Date(updatedMatch.date).toISOString();
      document.getElementById('match-date').textContent = updatedDate;
      document.getElementById('match-status').textContent = updatedMatch.status;


      //Hiding and showing data based on recived data
      if (updatedMatch.status === 'IN_PROGRESS') {
        document.getElementById('time-section').style.display = 'block';
      } else {
        document.getElementById('time-section').style.display = 'none';
      }

      if (updatedMatch.status === 'IN_PROGRESS' || updatedMatch.status === 'PLANNED') {
        document.getElementById('scoreA-btn').style.display = 'inline';
        document.getElementById('scoreB-btn').style.display = 'inline';
      } else {
        document.getElementById('scoreA-btn').style.display = 'none';
        document.getElementById('scoreB-btn').style.display = 'none';
      }

      if (data.set_over) {
        document.getElementById('end-set-Btn').style.display = 'inline';
      } else {
        document.getElementById('end-set-Btn').style.display = 'none';
      }

      if (data.match_over != null && data.match_over) {
        document.getElementById('end-match-Btn').style.display = 'inline';
      } else {
        document.getElementById('end-match-Btn').style.display = 'none';
      }

      updateButtonStates(updatedScoreA, updatedScoreB);
    });
    
    //functions to block subtracting points when points are 0
    function updateButtonStates(scoreA, scoreB) {
      document.getElementById('minusA-btn').disabled = scoreA === '0';
      document.getElementById('minusB-btn').disabled = scoreB === '0';
    }

    function validateScore(scoreId, buttonId) {
      const score = document.getElementById(scoreId).textContent;
      if (parseInt(score) === 0) {
        alert("Cannot subtract score when it's 0");
        return false;
      }
      return true;
    }
  </script>
</body>
</html>
